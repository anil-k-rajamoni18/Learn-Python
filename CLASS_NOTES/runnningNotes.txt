Hi, 
 updated questions on functions, please check and solve by next session
 link: https://github.com/anil-k-rajamoni18/Learn-Python/blob/main/CLASS_ASSIGNMENTS/ALL_QUESTIONS.ipynb
 
 1. create a branch with YourName 
 2. clone the url : 
	git clone -b branchName --single-branch https://github.com/anil-k-rajamoni18/Python-Discussion
 3. add your answers
 4. Push it into the remote branch 
	git status
	git add . 
	git status
	git commit -m "write commit message"
	git push -u orgin branchName 
	
Thanks.


####################
1. Create one pycharam project with name: pythonassign
2. create python dirs for each topic questions
3. add answers 
4. push 
###################
 

WHAT IS JSON ?
	- It's Data Types 
	- It's Usage 
	
What is an API ?
	- Types of API 
	- Different Implementations
	

What is Type Hints or Type Annotations in Python?
	
 




git clone https://github.com/anil-k-rajamoni18/Learn-Python.git


##ASSIGNMENT ###			
				
1. Create a package Utils
2. create a module with stringUtils
3. this module should include following operations
	- display the string length 
	- display string length without spaces 
	- display all vowels 
	- display whether string is palindrome or not 
	- display whether string is panagram or not 
	- display count of special characters: 
		space , . ? ; : * % $ # @ ! * ( ) _ - 

	- display reverse of a string.


##############

10/16/2023
#############
- What is module ?
- Types of modules
	- prebuild 
	- user build/user defined
- what is python package? and how to convert normal folder into python package
- 4 ways of importing the modules 
	1. import math 
		math.gcd(10,20)
	2. import math as mt 
		mt.gcd(10,20)
		
	3. from math import gcd, sin, tan 
		gcd(10,20)
	4. from math import * 
	
	

==> floder(python package) 
	- __init__.py
	- subfloder
		- file
		- file
		- file
	- subfloder
		- file
		- file
		
		
		
==> group of modules & sub-packages is A  package 

=> module = python file  == group of functions == group of conditional/looping/sequentials statements

	
#########################################	
OS [interacts with operating system]
==============
os.getcwd() : display current path 
os.chdir() : to change the path 
os.listdir() : display content or files of the path/dir
os.path.join(path1,path2)
os.mkdir() : create new dir/floder
os.rmdir() : delete dir/floder
open(filename, mode) : creates a file 
os.remove() 
os.rename() 
os.getenv(path) : display env variables

sys [interacts with interpreter]
===================
sys.version
sys.winver
sys.executable
sys.getsizeof(obj)

## array 


## random

## hashlib

## regrex or re 

## date time 

## requests 


## requests 
WHAT IS AN API? (application programming interface) defines set of rules for communciation
	
	it will allow two different systems(platforms) to communicate 
	
	: NETFLIX 
	one app (java) [web streaming]----------API's(XML,JSON)--------------- one(kotlin) [mobile streaming]
	
	java --- python
	
	javascript --> nodejs
	
	react js --.> java / nodejs / python
	
	REACT.JS/AJS/ (FE) ---apis----> B.E(java/python/ruby/rust)  ---APIS----> DB(MYSQL, MONGODB, Elastic Search)
	
	TYPES Implementations:
		- soap apis 
		- REST APIS (rest state transfer apis]
		- graphql apis 
	
	TYPES	
	- PUBLIC APIS 
	- PRIVATE APIS [access with key]
	
	METHODS:
		CREATE: POST 
		READ: GET 
		UPDATE: PUT 
		DELETE: DELETE 
		
	
	# HOW TO COSUME?
		- requests 
		- httpclient 
		

	# HTTP /HTTPS 
		- to send requests to the web servers 
		ex: browser ----> HTTPS ----> web servers
			browser	   <---web pages--
			
		https://www.google.com/search?q=python+oops+concepts+examples&rlz=1C1YTUH_enIN1050IN1050&oq=python+oops+concepts+examples+&gs_lcrp=EgZjaHJvbWUyCggAEEUYFhgeGDkyCggBEAAYhgMYigUyCggCEAAYhgMYigUyCggDEAAYhgMYigUyCggEEAAYhgMYigXSAQk2OTQ1M2owajeoAgCwAgA&sourceid=chrome&ie=UTF-8


	## TERMINOLOGIES 
		URL : https://reqres.in/api/users?page=2
		DOMAIN: https://reqres.in
		ENDPOINT: /api/users?page=2

	user/comp/mobile -----> request ---> API(communication/medium) -----> server/backend 
			<-------------response<----------


###########################

quizs
----------------
1. https://pynative.com/basic-python-quiz-for-beginners/ 

2. https://pynative.com/python-operators-and-expression-quiz/

3. https://pynative.com/python-if-else-and-for-loop-quiz/

4. https://pynative.com/python-functions-quiz/

5. https://pynative.com/python-random-data-generation-quiz/






##### #############################

- Create a module with a name: apiOperations
- perform following operations 
	- GET 
	- POST 
	- DELETE 
	- PUT 
- create one method for one operations 
	import requests
	def getUserDetails():
		apiUrl = 'https://reqres.in/api/users?page=2'
		response = requests.request("GET", apiUrl)
		print(response.status_code)
		if response.status_code == 200 or response.status_code == 201:
			print(response.json())
		
	
- reference: https://reqres.in/
			https://jsonplaceholder.typicode.com/
			https://rapidapi.com/hub


# EXCEPTIONAL HANDLING 
- WHAT IS EXCEPTION 
- WHAT IS ERROR 
- Importance of exception handling 
- keywords
	try 
	except
	finaly 
	raise 
	else 
	
BASE CLASS : Exception (will handle all exceptions)
CHILD CLASS: TypeError, ZeroDivisionError,ValueError
- Examples
	try:
		pass
		
	except:
		pass
	
	try:
		pass
	except:
		pass
	except:
		pass
		
	try:
		pass
		
	except(ZDE, VE, TE,AE) as e:
		pass
		
	try:
		pass
	
	except:
		pass
	finally:
		pass
		
	try:
		pass
	except:
		pass
	else:
		pass 
		
		
		
	try:
		pass
	except:
		raise 
		



JAVA 
---------------
try
catch
finally
throw
throws

PYTHON
--------------
try 
expect 
finally 
raise 


#####################


1. Write a Python program to handle a ZeroDivisionError exception when dividing a number by zero.

	exception ZeroDivisionError:

	Raised when the second argument of a division or modulo operation is zero. 
	The associated value is a string indicating the type of the operands and the operation.


2. Write a Python program that prompts the user to input an integer and raises a ValueError exception if the input is not a valid integer.

	exception ValueError:

	Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.


3. Write a Python program that opens a file and handles a FileNotFoundError exception if the file does not exist.

	exception FileNotFoundError:
	Raised when a file or directory is requested but doesn't exist. Corresponds to errno ENOENT.


4. Write a Python program that prompts the user to input two numbers and raises a TypeError exception if the inputs are not numerical.

	exception TypeError:
	Raised when an operation or function is applied to an object of inappropriate type. The associated value is a string giving details about the type mismatch.


5. Write a Python program that opens a file and handles a PermissionError exception if there is a permission issue.

	exception PermissionError:

	Raised when trying to run an operation without the adequate access rights - for example filesystem permissions. Corresponds to errno EACCES, EPERM, and ENOTCAPABLE.


6. Write a Python program that executes an operation on a list and handles an IndexError exception if the index is out of range.

	exception IndexError:

	Raised when a sequence subscript is out of range. (Slice indices are silently truncated to fall in the allowed range; if an index is not an integer, TypeError is raised.)


7. Write a Python program that prompts the user to input a number and handles a KeyboardInterrupt exception if the user cancels the input.

	exception KeyboardInterrupt:

	Raised when the user hits the interrupt key (normally Control-C or Delete). During execution, a check for interrupts is made regularly. The exception inherits from BaseException so as to not be accidentally caught by code that catches Exception and thus prevent the interpreter from exiting.


8. Write a Python program that opens a file and handles a UnicodeDecodeError exception if there is an encoding issue.

	exception UnicodeDecodeError:

	Raised when a Unicode-related error occurs during decoding. It is a subclass of UnicodeError.

9. Write a Python program that executes a list operation and handles an AttributeError exception if the attribute does not exist.

	exception AttributeError:

	Raised when an attribute reference (see Attribute references) or assignment fails. (When an object does not support attribute references or attribute assignments at all, TypeError is raised.)



### FILE HANDLING ############
-> File : primary unit for storage 
-> Floder/Dirs
	- subfloder/sub-dir	
		- files (.txt,.py, .java, .cpp, .pdf , .doc, .json, .env)
	

- INTRODUCTION TO FILES 
- RECAP of os module 
- syntax: open() method 
- different modes 
- TWO WAYS 
	1. f = open(fileName, mode) # must close the file after operation
	2. with open(fileName, mode) as f: # closed automatically 
		body 
- problem
	- counting uppercase
	- counting spaces 
	- counting vowels
	
- OPERATION
	- reading 
		mode = 'r' # file must be exits while reading , otherwise FileNotExistsError
	- writing
		mode = 'w'
		mode = 'x'
		mode = 'a'
-> File Object attributes
-> file object methods 
	- close()
	- read()
	- read(n)
	- readline()
	- readlines()
	- write()
	- writelines()
	- tell()
	- seek()
	
## tell() vs seek() 

Handson Excerise
=====================================
1.make a call to the endpoint: https://reqres.in/api/users?page=2
2.store the response
3.apply the json() store it in a variable
4.create a file with 
	name: users.txt and store all usernames (last_name, first_name)
		

### attribute vs method ########
module: justdoit 
	username = 'kumar'
	password = 'kumar@1234'
	def hi()-> str:
		return "hi"
	def greet(name: str) -> str:
		return f'hello {name}'
		
import justdoit
print(justdoit.hi())
print(justdoit.greet('bhanu'))



## PRE-REQ ###
-> WHAT IS FUNCTIONS 
-> Importance of functions 
- Advantage of functions 
- syntax:
	def functionName(param1, param2, ... paramn):
		pass
- Types 
	- Pre-Build functions 
		len(), sum() , max() , min() 
	- User-Defined Functions 
	
- Types of args 
	- * args  # tuple
	- **kwargs  # dictionary
	- required postional args 
	- default args 
- Local variables vs Global Variables
	- global 
	- nonlocal 
	
- Returning 
	- return values 
	- returning more than one value
	- returning function 
- Pass by values & pass by references

- Function Closure 

- Nested Functions 

- Recursive Functions



### BASICS OOPS ###
1. what is class  # it's a blueprint for object specification
2. what is object # it's realtime entity which has state (attributes) & behavior(methods)
3.what is state & behaviour?
4.what is function() vs method() 
	- function is not bounded with any class or object 
	- method is always bounded with class or object 
	ex: functions 
		len() , list(), map() , filter() , reduce() 
	ex: methods 
	response = request.get("url")
	response.json()
	response.text
	response.status_code
	
5.what is constructor in a class?
	- It will construct the object 
	- It is automatically when object is created 
	- name: 
		def __init__(self,param):
			pass
	

1A)A class encapsulates data (attributes) and functions (methods) that operate on that data.
For example, 
 you could create a class called "Car" that defines what attributes (color, make, model) and methods (start, stop, honk) a car object will have.

2A)Objects have state (the values of their attributes) and behavior (the methods they can perform).
Using the "Car" class example, an object would be a specific car, such as a red Ford Mustang

3A)In the context of objects and classes, "state" refers to the attributes or properties of an object. For a "Car" object, the state might include attributes like color, make, and model.
"Behavior" refers to the methods or functions that an object can perform. These methods define what actions or operations the object can execute. For a "Car" object, behaviors could include starting the engine, stopping, or honking the horn.

4A)In the context of objects and classes, "state" refers to the attributes or properties of an object. For a "Car" object, the state might include attributes like color, make, and model.
"Behavior" refers to the methods or functions that an object can perform. These methods define what actions or operations the object can execute. For a "Car" object, behaviors could include starting the engine, stopping, or honking the horn.

5A)In Python, a constructor is a special method used to initialize an object when it is created. The constructor method is named __init__. It is automatically called when you create a new object from a class.



6. what is self parameter in constructor?
	A: 
	- self is reference variable
	- it will always points to the current object/instance 
	- self should be the first param in constructor & in instance method 
	- self can be used to access object attributes inside a class 

	
7. what is difference b/w object attributes & class attributes 
	A:
	- object attributes : variables bounded to object / instance variables
	- class attributes: variables bound to class  / class level variables
	
8. How many access specificers we have in OOPS?
	- we have 3 access specifiers 
		- public 
		- protected
		- private 
		
9. Can a object be created with empty class definition?
	- yes 
	
10.what are different types of methods we have in a class?
	A:
		- instance methods 
		- static methods 
		- class methods 
		- abstract methods 
		
 
 
11.What is inhertiance and how to declare & What are the limitations of inheritance?
12.What is multiple inheritance?
13.What is the function of a super keyword? 
14.What is the difference between overloading and overriding?
15.How is encapsulation different from data abstraction?
16.Is it possible to call the base class method without creating an instance?
17.What are the limitations of OOPs?


OOPS TERMINOLOGIES
--------------------------
- variables -> attributes , member variables
- functions ->  methods, member functions 
- object = instance of a class = realworld entity 
- class = blueprint = object specification.

- state: defines data (variables)
- behavior: defines behavior/functionality (methods)



## Programming Paradigms ###
- Imperative Programing
- Declarative Programing
- Functional programming
- Object Oriented Programing


## Excerise ##

- Create a class with name: Calculator 
- define instance methods for all operations 
	addition
	subtraction
	division
	modulus
	power
	multiplication
	

oops quiz: https://realpython.com/quizzes/pybasics-oop/
quiz-2: https://realpython.com/quizzes/python3-object-oriented-programming/




## OOPS ##

- INTRODUCTION
- Functional Programing vs object-oriented-programming
- Pros & Cons 
- OOP's terminologies
	- attributes
	- methods
	- state 
	- behaviour 

- OOPS pillars 
	- OBJECT 
	- CLASS 
	- ENCAPSULATION
	- ABSTRACTION
	- PLOYMORPHISM 
	
- Object over-view
- Class over-view
- Different of declaring class [3ways]
- special method --> constructor 
	def __init__(self, params):
		body 

- self keyword 

- constructor overloading : multiple __init__() methods 
		- incase of multiple __init__() methods, always it will consider last declared signature
		
- Types Variables:
	- instance/object variables [will create one copy per one object]
	- class/static variables [will create one copy for all objects]

	



Parent/Super/Base 
Child/Dervied/SubClass

				

## 


DATABASES
	- MYSQL  
	- MONGODB
	



1.CLI (command Line interface)
	- python shell
	- CLI commands 
2.IDLE 

3.IDE (intergated development env)
	- code syntax 
	- code higlighting 
	- debugging
	- run 
	- test cases 
	
	1. VSCODE 
	2. Pycharm
	3. Atom 
	4. Sublime 
	
4. Notebooks 
	- jupyter notebook
	- jupyter lab
	- google colab 
	
	


## DECORATORS ###

-> In Python, decorators are a powerful and flexible way to modify or enhance the behavior of functions or methods without changing their source code. 
-> Decorators are often used for tasks like logging, 
	authentication, 
	memoization, and more. 


MYSQL 
-------------
WORKBENCH  - GUI 
SHELL  _ CLI 
SERVER  - need to sping up database 
CONNECTOR  - driver for connecting programming lang

popular cli commands
-------------------------
1.mysql -u username -p
2. show databases
3. show tables
4. describe tablename 
6. create database 


- what is database?
	A:
			- A database is an organized collection of structured information, or data, typically stored electronically in a computer system. 
			- A database is usually controlled by a database management system (DBMS)
- types of database?
	A:
		- RELATION DATABASES (MySql, Oracel, Microsoft SQL server, PostgresSQL)
		- NON RELATIONAL DATABASES (MONGODB, Elastic Search, Redis, Amazon Dynamo DB)
		- OBJECT ORIENTED DATABASES (ORM ) (JPA, Hibernate, Flask ORM, SqlAlchemy, Django ORM )
		

- why we use database?
	A:
		- Databases are used for storing, maintaining and accessing any sort of data.
		- data storage, data retrieval, data security
		
- Before databases, how software applications use to store the DATA?
	- On the local Bare Metal Hardware.
	- File Systems
	- Physical Drives
	
which language used for developing mysql database? 
	A:
		C / C++
	
SQL(StructuredQueryLan) vs NOSQL (Not Only SQL)
----------------------------------------------------
1.SQL - Data is stored in a sequential manner using tables [it will store relation data]
2.NOSQL - Data is stored outside the traditional structure. [it will store non relation data in Document/Graph/KV/entity format]


SQL: SQL databases use a standard query language (SQL) for data manipulation and retrieval. 
	SQL provides powerful querying capabilities for structured data.

NoSQL: NoSQL databases typically use various query languages specific to their data model.
	These languages may not be as standardized as SQL, but they are designed to work with the data model's characteristics
	
	
	
	
- 


orderNumber prdName 	qua 	price
OD1 		iphone13 	2 		78000
OD3 		mac air2 	1  		120000
OD2			samsung s3  2       880000
OD3         iphone12    1       55000
OD2         earpods2    3       25000


SELECT 
    a.ordernumber, 
    status, 
    SUM(priceeach*quantityOrdered) total
FROM
    orderdetails a
INNER JOIN orders b 
    ON b.ordernumber = a.ordernumber
GROUP BY  
    ordernumber, 
    status
	
	


WORKBENCH Queries
==============================

-- creating database
CREATE DATABASE inventory_db;

use inventory_db;

-- table creations ;
CREATE TABLE IF NOT EXISTS salesman (
	salesman_id NUMERIC(5) PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    city VARCHAR(50) NOT NULL,
    commission DECIMAL(5,2)
);



CREATE TABLE IF NOT EXISTS customer (
	customer_id NUMERIC(5) PRIMARY KEY,
    cust_name VARCHAR(50) NOT NULL,
    city VARCHAR(50) NOT NULL,
    grade numeric(3),
    salesman_id numeric(5),
    foreign key(salesman_id) references salesman(salesman_id)
);

CREATE TABLE IF NOT EXISTS orders (
 ord_no numeric(5) primary key,
 purch_amt decimal(8,2) NOT NULL,
 ord_date date NOT NULL,
 customer_id numeric(5),
 salesman_id numeric(5),
 foreign key(customer_id) references customer(customer_id),
 foreign key(salesman_id) references salesman(salesman_id)
);



create database employee;
use employee;

create table department(
dep_id int not null,
dep_name varchar(20),
dep_location varchar(15),
PRIMARY KEY(dep_id)
);


create table employees(
emp_id integer NOT NULL,
emp_name VARCHAR(15),
job_name varchar(10),
manager_id int,
hire_date date,
salaray decimal(10,2),
commision decimal(7,2),
dep_id int,
PRIMARY KEY(emp_id),
FOREIGN KEY (dep_id) REFERENCES department (dep_id)
);

create table slary_grade(
grade int not null,
min_salary int,
max_salary int,
PRIMARY KEY(grade)
);

INSERT INTO department VALUES(1,'IT','hyd');
INSERT INTO department VALUES(2,'Network','chennai');
INSERT INTO department VALUES(3,'Infrastructure','noida');

SELECT * FROM department;

INSERT INTO employees VALUES(101,'joyce','intern', 0018053, '2023-10-20', 67000.28, 19272.2,2);
INSERT INTO employees VALUES(102,'bhanu','sn intern', 001853, '2022-10-20', 77000.28, 20272.2,3);
INSERT INTO employees VALUES(103,'teja','webintern', 001753, '2023-02-20', 88000.28, 16272.2,2);

SELECT * from employees;

DELETE FROM employees where employees.dep_id = 2;


INSERT INTO slary_grade VALUES(22, 22000, 44000);
INSERT INTO slary_grade VALUES(23, 45000, 65000);
INSERT INTO slary_grade VALUES(26, 67000, 99000);

SELECT * FROM slary_grade;

SELECT * FROM department;
UPDATE department SET department.dep_name = 'HR' WHERE department.dep_id = 3;

DELETE FROM department where department.dep_id = 2;



######################################3

use nov_course_db;
show tables;


CREATE TABLE members (
    member_id INT AUTO_INCREMENT,
    name VARCHAR(100),
    PRIMARY KEY (member_id)
);

CREATE TABLE committees (
    committee_id INT AUTO_INCREMENT,
    name VARCHAR(100),
    PRIMARY KEY (committee_id)
);


INSERT INTO members(name)
VALUES('John'),('Jane'),('Mary'),('David'),('Amelia');

INSERT INTO committees(name)
VALUES('John'),('Mary'),('Amelia'),('Joe');

select * from members;
select * from committees;

use classicmodels;
show tables;


call display_total_amount_on_status('Shipped');
call display_total_amount_on_status('Resolved');
call display_total_amount_on_status('In Process');

########################################

CREATE DEFINER=`root`@`localhost` PROCEDURE `display_total_amount_on_status`(IN orderstatus varchar(30))
BEGIN
SELECT 
    a.ordernumber, 
    status, 
    SUM(priceeach*quantityOrdered) total
FROM
    orderdetails a
INNER JOIN orders b 
    ON b.ordernumber = a.ordernumber
GROUP BY  
    ordernumber, 
    status
HAVING 
    status = orderstatus AND 
    total > 1500;
END