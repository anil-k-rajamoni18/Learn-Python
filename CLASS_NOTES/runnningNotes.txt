Hi, 
 updated questions on functions, please check and solve by next session
 link: https://github.com/anil-k-rajamoni18/Learn-Python/blob/main/CLASS_ASSIGNMENTS/ALL_QUESTIONS.ipynb
 
 1. create a branch with YourName 
 2. clone the url : 
	git clone -b branchName --single-branch https://github.com/anil-k-rajamoni18/Python-Discussion
 3. add your answers
 4. Push it into the remote branch 
	git status
	git add . 
	git status
	git commit -m "write commit message"
	git push -u orgin branchName 
	
Thanks.



WHAT IS JSON ?
	- It's Data Types 
	- It's Usage 
	
What is an API ?
	- Types of API 
	- Different Implementations
	

What is Type Hints or Type Annotations in Python?
	
 




git clone https://github.com/anil-k-rajamoni18/Learn-Python.git


##ASSIGNMENT ###			
				
1. Create a package Utils
2. create a module with stringUtils
3. this module should include following operations
	- display the string length 
	- display string length without spaces 
	- display all vowels 
	- display whether string is palindrome or not 
	- display whether string is panagram or not 
	- display count of special characters: 
		space , . ? ; : * % $ # @ ! * ( ) _ - 

	- display reverse of a string.


##############

10/16/2023
#############
- What is module ?
- Types of modules
	- prebuild 
	- user build/user defined
- what is python package? and how to convert normal folder into python package
- 4 ways of importing the modules 
	1. import math 
		math.gcd(10,20)
	2. import math as mt 
		mt.gcd(10,20)
		
	3. from math import gcd, sin, tan 
		gcd(10,20)
	4. from math import * 
	
	

==> floder(python package) 
	- __init__.py
	- subfloder
		- file
		- file
		- file
	- subfloder
		- file
		- file
		
		
		
==> group of modules & sub-packages is A  package 

=> module = python file  == group of functions == group of conditional/looping/sequentials statements

	
#########################################	
OS [interacts with operating system]
==============
os.getcwd() : display current path 
os.chdir() : to change the path 
os.listdir() : display content or files of the path/dir
os.path.join(path1,path2)
os.mkdir() : create new dir/floder
os.rmdir() : delete dir/floder
open(filename, mode) : creates a file 
os.remove() 
os.rename() 
os.getenv(path) : display env variables

sys [interacts with interpreter]
===================
sys.version
sys.winver
sys.executable
sys.getsizeof(obj)

## array 


## random

## hashlib

## regrex or re 

## date time 

## requests 


## requests 
WHAT IS AN API? (application programming interface) defines set of rules for communciation
	
	it will allow two different systems(platforms) to communicate 
	
	: NETFLIX 
	one app (java) [web streaming]----------API's(XML,JSON)--------------- one(kotlin) [mobile streaming]
	
	java --- python
	
	javascript --> nodejs
	
	react js --.> java / nodejs / python
	
	REACT.JS/AJS/ (FE) ---apis----> B.E(java/python/ruby/rust)  ---APIS----> DB(MYSQL, MONGODB, Elastic Search)
	
	TYPES Implementations:
		- soap apis 
		- REST APIS (rest state transfer apis]
		- graphql apis 
	
	TYPES	
	- PUBLIC APIS 
	- PRIVATE APIS [access with key]
	
	METHODS:
		CREATE: POST 
		READ: GET 
		UPDATE: PUT 
		DELETE: DELETE 
		
	
	# HOW TO COSUME?
		- requests 
		- httpclient 
		

	# HTTP /HTTPS 
		- to send requests to the web servers 
		ex: browser ----> HTTPS ----> web servers
			browser	   <---web pages--
			
		https://www.google.com/search?q=python+oops+concepts+examples&rlz=1C1YTUH_enIN1050IN1050&oq=python+oops+concepts+examples+&gs_lcrp=EgZjaHJvbWUyCggAEEUYFhgeGDkyCggBEAAYhgMYigUyCggCEAAYhgMYigUyCggDEAAYhgMYigUyCggEEAAYhgMYigXSAQk2OTQ1M2owajeoAgCwAgA&sourceid=chrome&ie=UTF-8


	## TERMINOLOGIES 
		URL : https://reqres.in/api/users?page=2
		DOMAIN: https://reqres.in
		ENDPOINT: /api/users?page=2

	user/comp/mobile -----> request ---> API(communication/medium) -----> server/backend 
			<-------------response<----------


###########################

quizs
----------------
1. https://pynative.com/basic-python-quiz-for-beginners/ 

2. https://pynative.com/python-operators-and-expression-quiz/

3. https://pynative.com/python-if-else-and-for-loop-quiz/

4. https://pynative.com/python-functions-quiz/

5. https://pynative.com/python-random-data-generation-quiz/






##### #############################

- Create a module with a name: apiOperations
- perform following operations 
	- GET 
	- POST 
	- DELETE 
	- PUT 
- create one method for one operations 

	import requests
	def getUserDetails():
		apiUrl = 'https://reqres.in/api/users?page=2'
		response = requests.request("GET", apiUrl)
		print(response.status_code)
		if response.status_code == 200 or response.status_code == 201:
			print(response.json())
		
- reference: https://reqres.in/
			https://jsonplaceholder.typicode.com/
			https://rapidapi.com/hub


# EXCEPTIONAL HANDLING 
- WHAT IS EXCEPTION 
- WHAT IS ERROR 
- Importance of exception handling 
- keywords
	try 
	except
	finaly 
	raise 
	else 
	
BASE CLASS : Exception (will handle all exceptions)
CHILD CLASS: TypeError, ZeroDivisionError,ValueError
- Examples
	try:
		pass
		
	except:
		pass
	
	try:
		pass
	except:
		pass
	except:
		pass
		
	try:
		pass
		
	except(ZDE, VE, TE,AE) as e:
		pass
		
	try:
		pass
	
	except:
		pass
	finally:
		pass
		
	try:
		pass
	except:
		pass
	else:
		pass 
		
		
		
	try:
		pass
	except:
		raise 
		



JAVA 
---------------
try
catch
finally
throw
throws

PYTHON
--------------
try 
expect 
finally 
raise 


#####################


1. Write a Python program to handle a ZeroDivisionError exception when dividing a number by zero.

	exception ZeroDivisionError:

	Raised when the second argument of a division or modulo operation is zero. 
	The associated value is a string indicating the type of the operands and the operation.


2. Write a Python program that prompts the user to input an integer and raises a ValueError exception if the input is not a valid integer.

	exception ValueError:

	Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.


3. Write a Python program that opens a file and handles a FileNotFoundError exception if the file does not exist.

	exception FileNotFoundError:
	Raised when a file or directory is requested but doesn't exist. Corresponds to errno ENOENT.


4. Write a Python program that prompts the user to input two numbers and raises a TypeError exception if the inputs are not numerical.

	exception TypeError:
	Raised when an operation or function is applied to an object of inappropriate type. The associated value is a string giving details about the type mismatch.


5. Write a Python program that opens a file and handles a PermissionError exception if there is a permission issue.

	exception PermissionError:

	Raised when trying to run an operation without the adequate access rights - for example filesystem permissions. Corresponds to errno EACCES, EPERM, and ENOTCAPABLE.


6. Write a Python program that executes an operation on a list and handles an IndexError exception if the index is out of range.

	exception IndexError:

	Raised when a sequence subscript is out of range. (Slice indices are silently truncated to fall in the allowed range; if an index is not an integer, TypeError is raised.)


7. Write a Python program that prompts the user to input a number and handles a KeyboardInterrupt exception if the user cancels the input.

	exception KeyboardInterrupt:

	Raised when the user hits the interrupt key (normally Control-C or Delete). During execution, a check for interrupts is made regularly. The exception inherits from BaseException so as to not be accidentally caught by code that catches Exception and thus prevent the interpreter from exiting.


8. Write a Python program that opens a file and handles a UnicodeDecodeError exception if there is an encoding issue.

	exception UnicodeDecodeError:

	Raised when a Unicode-related error occurs during decoding. It is a subclass of UnicodeError.

9. Write a Python program that executes a list operation and handles an AttributeError exception if the attribute does not exist.

	exception AttributeError:

	Raised when an attribute reference (see Attribute references) or assignment fails. (When an object does not support attribute references or attribute assignments at all, TypeError is raised.)
